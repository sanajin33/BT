// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace BT.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250101120615_2401011504")]
    partial class _2401011504
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BT.Data.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100.00m,
                            DonationDate = new DateTime(2025, 1, 1, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Donation for food supplies",
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 50.00m,
                            DonationDate = new DateTime(2025, 1, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "For tree plantation materials",
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 200.00m,
                            DonationDate = new DateTime(2025, 3, 1, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "For animal adoption campaign",
                            ProjectId = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 150.00m,
                            DonationDate = new DateTime(2025, 4, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Support for education fair",
                            ProjectId = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Amount = 75.00m,
                            DonationDate = new DateTime(2025, 5, 5, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Cleaning tools and supplies",
                            ProjectId = 7,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Amount = 300.00m,
                            DonationDate = new DateTime(2025, 6, 6, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Medical equipment for healthcare camp",
                            ProjectId = 8,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Amount = 100.00m,
                            DonationDate = new DateTime(2025, 7, 7, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Building materials for renovation",
                            ProjectId = 4,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Amount = 50.00m,
                            DonationDate = new DateTime(2025, 8, 8, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Training materials for skill training.",
                            ProjectId = 5,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Amount = 250.00m,
                            DonationDate = new DateTime(2025, 9, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Support for recycling initiative",
                            ProjectId = 9,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Amount = 180.00m,
                            DonationDate = new DateTime(2025, 10, 11, 21, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Support for mental health workshop.",
                            ProjectId = 10,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.DonationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("DonationCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Items such as canned goods, rice, etc.",
                            Name = "Food Supplies"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sustainable materials for environmental projects",
                            Name = "Eco Materials"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Food, toys, and equipment for pets",
                            Name = "Animal Supplies"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Books, stationery, and teaching aids",
                            Name = "Education Materials"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tools and materials for cleaning activities",
                            Name = "Cleaning Supplies"
                        },
                        new
                        {
                            Id = 6,
                            Description = "First aid kits, medicines, and equipment",
                            Name = "Medical Supplies"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Items for renovation and construction",
                            Name = "Building Materials"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Equipment for skill training.",
                            Name = "Vocational Tools"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Soap, sanitizer, and personal care items.",
                            Name = "Hygiene Kits"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Blankets, jackets, and other winter essentials.",
                            Name = "Winter Supplies"
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.DonationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("DonationId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DonationId");

                    b.ToTable("DonationItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DonationId = 1,
                            ItemName = "Canned Beans",
                            Notes = "For food distribution",
                            Quantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DonationId = 2,
                            ItemName = "Tree Saplings",
                            Notes = "For urban plantation project",
                            Quantity = 50
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            DonationId = 3,
                            ItemName = "Dog Food",
                            Notes = "For animal rescue efforts",
                            Quantity = 30
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            DonationId = 4,
                            ItemName = "Notebooks",
                            Notes = "For education fair distribution",
                            Quantity = 200
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            DonationId = 5,
                            ItemName = "Trash Bags",
                            Notes = "Used in park cleanup",
                            Quantity = 500
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            DonationId = 6,
                            ItemName = "First Aid Kits",
                            Notes = "For healthcare camp",
                            Quantity = 20
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            DonationId = 7,
                            ItemName = "Cement Bags",
                            Notes = "Used in shelter renovation",
                            Quantity = 40
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            DonationId = 8,
                            ItemName = "Toolkits",
                            Notes = "For skill training.",
                            Quantity = 15
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            DonationId = 9,
                            ItemName = "Plastic Bottles",
                            Notes = "Collected for recycling.",
                            Quantity = 100
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            DonationId = 10,
                            ItemName = "Stress Balls",
                            Notes = "For mental health workshop.",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.DonationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DonationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.ToTable("DonationLogs");
                });

            modelBuilder.Entity("BT.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Great initiative for the community!",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 1,
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Well-organized event but could use more volunteers.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 2,
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Loved being part of the animal adoption campaign.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 3,
                            Rating = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Comments = "The education fair was very informative.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 4,
                            Rating = 4,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Comments = "Parks look amazing after the cleanup drive.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 5,
                            Rating = 5,
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Comments = "Healthcare camp was very beneficial.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 6,
                            Rating = 4,
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Comments = "Shelters look much better now.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 7,
                            Rating = 5,
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Comments = "Skill training was very helpful but could use more resources.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 8,
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Comments = "Recycling workshop was insightful!",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 9,
                            Rating = 5,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Comments = "Mental health workshop was excellent.",
                            FeedbackDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            OrganizationId = 10,
                            Rating = 5,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRead = false,
                            Message = "Thank you for your donation!",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsRead = false,
                            Message = "Your volunteer application is approved.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsRead = false,
                            Message = "Your donation was successfully processed.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            IsRead = false,
                            Message = "Your volunteer task has been updated.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            IsRead = false,
                            Message = "Thank you for participating in the healthcare camp.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            IsRead = false,
                            Message = "The shelter renovation project is completed.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            IsRead = false,
                            Message = "Training session schedule is now available.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            IsRead = false,
                            Message = "Your volunteer application status has been updated.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            IsRead = false,
                            Message = "Your recycling workshop slot is confirmed.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            IsRead = false,
                            Message = "Join us for the mental health workshop.",
                            SentAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MissionStatement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Charity Lane",
                            ContactEmail = "info@helpinghands.org",
                            ContactPhone = "555-9876",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "To support local communities.",
                            Name = "Helping Hands"
                        },
                        new
                        {
                            Id = 2,
                            Address = "202 Eco Way",
                            ContactEmail = "contact@greenearth.org",
                            ContactPhone = "555-5432",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Promoting sustainable living.",
                            Name = "Green Earth"
                        },
                        new
                        {
                            Id = 3,
                            Address = "303 Pet Street",
                            ContactEmail = "contact@animalrescue.org",
                            ContactPhone = "555-6543",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Saving stray animals.",
                            Name = "Animal Rescue"
                        },
                        new
                        {
                            Id = 4,
                            Address = "404 Hunger Lane",
                            ContactEmail = "info@foodbank.org",
                            ContactPhone = "555-3210",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Providing meals to the homeless.",
                            Name = "Food Bank"
                        },
                        new
                        {
                            Id = 5,
                            Address = "505 Green Road",
                            ContactEmail = "contact@ecowarriors.org",
                            ContactPhone = "555-4321",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Fighting for a cleaner planet.",
                            Name = "Eco Warriors"
                        },
                        new
                        {
                            Id = 6,
                            Address = "606 Knowledge Blvd",
                            ContactEmail = "info@educationfirst.org",
                            ContactPhone = "555-8765",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Promoting education for all.",
                            Name = "Education First"
                        },
                        new
                        {
                            Id = 7,
                            Address = "707 Wellness Way",
                            ContactEmail = "contact@healthforall.org",
                            ContactPhone = "555-7654",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Providing free healthcare services.",
                            Name = "Health for All"
                        },
                        new
                        {
                            Id = 8,
                            Address = "808 Haven Drive",
                            ContactEmail = "info@safeshelter.org",
                            ContactPhone = "555-6542",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Shelter for the homeless.",
                            Name = "Safe Shelter"
                        },
                        new
                        {
                            Id = 9,
                            Address = "909 Growth Street",
                            ContactEmail = "contact@youthempower.org",
                            ContactPhone = "555-4444",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Empowering young minds.",
                            Name = "Youth Empowerment"
                        },
                        new
                        {
                            Id = 10,
                            Address = "1000 Bright Lane",
                            ContactEmail = "info@cleanfuture.org",
                            ContactPhone = "555-3333",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            MissionStatement = "Creating a cleaner tomorrow.",
                            Name = "Clean Future"
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A project to distribute food to the needy.",
                            EndDate = new DateTime(2025, 1, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2024, 12, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            Title = "Food Drive"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Planting trees in urban areas.",
                            EndDate = new DateTime(2025, 2, 27, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 1, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            Title = "Tree Plantation"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Finding homes for stray animals.",
                            EndDate = new DateTime(2025, 3, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 2, 28, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            Title = "Animal Adoption"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Promoting education opportunities.",
                            EndDate = new DateTime(2025, 4, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 3, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            Title = "Education Fair"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cleaning up local parks.",
                            EndDate = new DateTime(2025, 5, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 4, 30, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            Title = "Clean Up Drive"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Providing free medical checkups.",
                            EndDate = new DateTime(2025, 6, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 5, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            Title = "Healthcare Camp"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Renovating shelters for the homeless.",
                            EndDate = new DateTime(2025, 7, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 6, 30, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            Title = "Shelter Renovation"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Providing vocational training to unemployed individuals.",
                            EndDate = new DateTime(2025, 8, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 7, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            Title = "Skill Training"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Reducing plastic waste through recycling.",
                            EndDate = new DateTime(2025, 9, 29, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 8, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            Title = "Plastic Recycling Initiative"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Promoting mental wellness in the community.",
                            EndDate = new DateTime(2025, 10, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            OrganizationId = 1,
                            StartDate = new DateTime(2025, 9, 30, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            Title = "Mental Health Workshop"
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.ProjectUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectUpdates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            UpdateBody = "We successfully delivered 500 food packages.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Food Packages Delivered"
                        },
                        new
                        {
                            Id = 2,
                            ProjectId = 2,
                            UpdateBody = "100 trees were planted in the city park.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Trees Planted"
                        },
                        new
                        {
                            Id = 3,
                            ProjectId = 3,
                            UpdateBody = "20 pets found loving homes.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Animal Adoption Success"
                        },
                        new
                        {
                            Id = 4,
                            ProjectId = 4,
                            UpdateBody = "Dates and locations for the fair are finalized.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Education Fair Scheduled"
                        },
                        new
                        {
                            Id = 5,
                            ProjectId = 5,
                            UpdateBody = "Local parks are now spotless and welcoming.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Cleanup Drive Completed"
                        },
                        new
                        {
                            Id = 6,
                            ProjectId = 6,
                            UpdateBody = "Over 200 individuals benefited from the camp.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Healthcare Camp Report"
                        },
                        new
                        {
                            Id = 7,
                            ProjectId = 7,
                            UpdateBody = "Shelters are ready for use by the needy.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Shelter Renovation Done"
                        },
                        new
                        {
                            Id = 8,
                            ProjectId = 8,
                            UpdateBody = "Training sessions started successfully.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Skill Training Begun"
                        },
                        new
                        {
                            Id = 9,
                            ProjectId = 9,
                            UpdateBody = "50 participants learned about recycling.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Plastic Recycling Workshop Held"
                        },
                        new
                        {
                            Id = 10,
                            ProjectId = 10,
                            UpdateBody = "Over 100 attendees benefited.",
                            UpdateDate = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            UpdateTitle = "Mental Health Workshop Success"
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "BaşakŞehir/İstanbul",
                            ConcurrencyStamp = "43e6c8b7-c1b1-472a-8571-c38842d2c2a6",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "senacindioglu@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Sena Cindioğlu",
                            NormalizedEmail = "SENACINDIOGLU@GMAIL.COM",
                            NormalizedUserName = "SENACINDIOGLU@GMAIL.COM",
                            PhoneNumber = "905539555123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "senacindioglu@gmail.com",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "123 Elm Street",
                            ConcurrencyStamp = "040cbb41-c9fd-4cda-8e86-ceb533a31214",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Doe",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
                            PhoneNumber = "555-1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "456 Oak Avenue",
                            ConcurrencyStamp = "4aba19c4-62f5-4bc1-a002-633e78671ced",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jane Smith",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH@EXAMPLE.COM",
                            PhoneNumber = "555-5678",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com",
                            UserType = 3
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "789 Pine Road",
                            ConcurrencyStamp = "0812dbe6-4c5b-4c05-8271-4cfdefa6df9d",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "contact@helporg.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Help Org",
                            NormalizedEmail = "CONTACT@HELPORG.ORG",
                            NormalizedUserName = "CONTACT@HELPORG.ORG",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "contact@helporg.org",
                            UserType = 2
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "321 Birch Road",
                            ConcurrencyStamp = "3ae8362b-0a14-4d20-b5e1-76bfd02ee79a",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "alice.cooper@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Alice Cooper",
                            NormalizedEmail = "ALICE.COOPER@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.COOPER@EXAMPLE.COM",
                            PhoneNumber = "555-7890",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "alice.cooper@example.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "654 Spruce Street",
                            ConcurrencyStamp = "e08aa345-5ca5-417c-ba38-2c9a196de571",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "bob.marley@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bob Marley",
                            NormalizedEmail = "BOB.MARLEY@EXAMPLE.COM",
                            NormalizedUserName = "BOB.MARLEY@EXAMPLE.COM",
                            PhoneNumber = "555-6789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bob.marley@example.com",
                            UserType = 3
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "987 Cedar Avenue",
                            ConcurrencyStamp = "b815559f-1ccd-4db8-952c-f33133618de2",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "charity.group@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Charity Group",
                            NormalizedEmail = "CHARITY.GROUP@EXAMPLE.COM",
                            NormalizedUserName = "CHARITY.GROUP@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "charity.group@example.com",
                            UserType = 2
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "789 Maple Lane",
                            ConcurrencyStamp = "cbc84531-edf8-49fa-ac1f-84b54698d33e",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "diana.ross@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Diana Ross",
                            NormalizedEmail = "DIANA.ROSS@EXAMPLE.COM",
                            NormalizedUserName = "DIANA.ROSS@EXAMPLE.COM",
                            PhoneNumber = "555-3456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "diana.ross@example.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "135 Willow Drive",
                            ConcurrencyStamp = "0f888b96-b76b-4e3b-8847-8f6ba211f009",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "edward.nigma@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Edward Nigma",
                            NormalizedEmail = "EDWARD.NIGMA@EXAMPLE.COM",
                            NormalizedUserName = "EDWARD.NIGMA@EXAMPLE.COM",
                            PhoneNumber = "555-4567",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "edward.nigma@example.com",
                            UserType = 3
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "Wayne Manor",
                            ConcurrencyStamp = "3887fe1f-47c0-4d08-aa63-bdfd1585e507",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "bruce.wayne@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bruce Wayne",
                            NormalizedEmail = "BRUCE.WAYNE@EXAMPLE.COM",
                            NormalizedUserName = "BRUCE.WAYNE@EXAMPLE.COM",
                            PhoneNumber = "555-7777",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bruce.wayne@example.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "Metropolis",
                            ConcurrencyStamp = "d49c47ac-6482-4e9a-93cc-e7ae5fbd73b4",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 12, 52, 340, DateTimeKind.Utc).AddTicks(9460),
                            Email = "clark.kent@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Clark Kent",
                            NormalizedEmail = "CLARK.KENT@EXAMPLE.COM",
                            NormalizedUserName = "CLARK.KENT@EXAMPLE.COM",
                            PhoneNumber = "555-8888",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "clark.kent@example.com",
                            UserType = 3
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.VolunteerApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("VolunteerApplications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationDate = new DateTime(2025, 1, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ApplicationDate = new DateTime(2025, 1, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            TaskId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApplicationDate = new DateTime(2025, 2, 21, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            ApplicationDate = new DateTime(2025, 3, 11, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 4,
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            ApplicationDate = new DateTime(2025, 4, 17, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            TaskId = 5,
                            UserId = 7
                        },
                        new
                        {
                            Id = 6,
                            ApplicationDate = new DateTime(2025, 5, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 6,
                            UserId = 8
                        },
                        new
                        {
                            Id = 7,
                            ApplicationDate = new DateTime(2025, 6, 21, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            TaskId = 7,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            ApplicationDate = new DateTime(2025, 7, 23, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 8,
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            ApplicationDate = new DateTime(2025, 9, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 9,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            ApplicationDate = new DateTime(2025, 10, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TaskId = 10,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("BT.Data.Entities.VolunteerTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("VolunteerTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 1, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Distribute food packages",
                            ProjectId = 2,
                            Status = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 2, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Plant trees in designated areas",
                            ProjectId = 2,
                            Status = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 3, 10, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Assist with animal adoption event",
                            ProjectId = 2,
                            Status = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 4, 11, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Set up booths for education fair",
                            ProjectId = 5,
                            Status = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 5, 12, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Organize volunteers for park cleanup",
                            ProjectId = 6,
                            Status = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 6, 13, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Coordinate medical staff for camp",
                            ProjectId = 7,
                            Status = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 7, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Assist in shelter renovation",
                            ProjectId = 8,
                            Status = 2,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 8, 15, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Prepare training materials",
                            ProjectId = 2,
                            Status = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 9, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Assist in recycling workshop",
                            ProjectId = 9,
                            Status = 2,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 10, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Coordinate mental health workshop logistics",
                            ProjectId = 10,
                            Status = 2,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BT.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BT.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BT.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BT.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BT.Data.Entities.Donation", b =>
                {
                    b.HasOne("BT.Data.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BT.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BT.Data.Entities.DonationItem", b =>
                {
                    b.HasOne("BT.Data.Entities.DonationCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BT.Data.Entities.Donation", "Donation")
                        .WithMany("Items")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("BT.Data.Entities.DonationLog", b =>
                {
                    b.HasOne("BT.Data.Entities.Donation", "Donation")
                        .WithMany("Logs")
                        .HasForeignKey("DonationId");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("BT.Data.Entities.Feedback", b =>
                {
                    b.HasOne("BT.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BT.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BT.Data.Entities.Notification", b =>
                {
                    b.HasOne("BT.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BT.Data.Entities.Organization", b =>
                {
                    b.HasOne("BT.Data.Entities.User", null)
                        .WithMany("Organizations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BT.Data.Entities.Project", b =>
                {
                    b.HasOne("BT.Data.Entities.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BT.Data.Entities.ProjectUpdate", b =>
                {
                    b.HasOne("BT.Data.Entities.Project", "Project")
                        .WithMany("ProjectUpdates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BT.Data.Entities.VolunteerApplication", b =>
                {
                    b.HasOne("BT.Data.Entities.VolunteerTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BT.Data.Entities.User", "User")
                        .WithMany("VolunteerApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BT.Data.Entities.VolunteerTask", b =>
                {
                    b.HasOne("BT.Data.Entities.Project", "Project")
                        .WithMany("VolunteerTask")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BT.Data.Entities.User", "User")
                        .WithMany("VolunteerTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BT.Data.Entities.Donation", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("BT.Data.Entities.DonationCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BT.Data.Entities.Organization", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("BT.Data.Entities.Project", b =>
                {
                    b.Navigation("ProjectUpdates");

                    b.Navigation("VolunteerTask");
                });

            modelBuilder.Entity("BT.Data.Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Organizations");

                    b.Navigation("VolunteerApplications");

                    b.Navigation("VolunteerTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
